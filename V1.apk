<html><head><base href=""><meta name="google-site-verification" content="your-verification-code"><title>Pupil Point - Optometry Study Guide</title><style>
    body { 
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #e8f4f8;
        min-height: 100vh;
    }
    .container {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        margin: 0 auto;
        display: none; /* Hide the main content initially */
    }
    .header {
        text-align: center;
        margin-bottom: 30px;
        position: relative;
        padding: 20px;
    }
    .header h1 {
        color: #2c3e50;
        font-size: 3em;
        margin-bottom: 10px;
        font-weight: 900;
        text-transform: uppercase;
        letter-spacing: 2px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        background: linear-gradient(45deg, #2c3e50, #3498db);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: titleGlow 2s ease-in-out infinite;
    }
    @keyframes titleGlow {
        0%, 100% {
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        50% {
            text-shadow: 2px 2px 15px rgba(52, 152, 219, 0.5);
        }
    }
    .eye-container {
        width: 120px;
        height: 120px;
        margin: 0 auto 20px;
        position: relative;
    }
    .eye {
        width: 100%;
        height: 100%;
        background: white;
        border-radius: 50%;
        border: 4px solid #3498db;
        position: relative;
        overflow: hidden;
    }
    .pupil {
        width: 40%;
        height: 40%;
        background: #2c3e50;
        border-radius: 50%;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        animation: lookAround 5s infinite;
    }
    @keyframes lookAround {
        0% { transform: translate(-50%, -50%); }
        25% { transform: translate(-20%, -20%); }
        50% { transform: translate(-80%, -50%); }
        75% { transform: translate(-50%, -80%); }
        100% { transform: translate(-50%, -50%); }
    }
    #output {
        white-space: pre-wrap;
        background: #ffffff;
        padding: 30px;
        border-radius: 12px;
        margin-top: 20px;
        border: 1px solid #e0e0e0;
        font-size: 15px;
        line-height: 1.6;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        font-family: system-ui, -apple-system, sans-serif;
        color: #2c3e50;
    }
    #output h1 {
        font-size: 2.5em;
        border-bottom: 2px solid #3498db;
        padding-bottom: 0.3em;
        margin: 1em 0 0.5em;
    }
    #output h2 {
        font-size: 2em;
        border-bottom: 1px solid #bdc3c7;
        padding-bottom: 0.3em;
        margin: 1em 0 0.5em;
    }
    #output h3 {
        font-size: 1.5em;
        margin: 1em 0 0.5em;
    }
    #output p {
        margin: 0.8em 0;
        line-height: 1.6;
    }
    #output ul, #output ol {
        padding-left: 2em;
        margin: 0.8em 0;
    }
    #output li {
        margin: 0.3em 0;
        line-height: 1.6;
    }
    #output blockquote {
        border-left: 4px solid #3498db;
        margin: 1em 0;
        padding: 0.5em 1em;
        background: #f7f9fc;
    }
    #output table {
        border-collapse: collapse;
        width: 100%;
        margin: 1em 0;
    }
    #output th, #output td {
        border: 1px solid #ddd;
        padding: 0.5em;
        text-align: left;
    }
    #output th {
        background: #f5f6fa;
    }
    .input-group {
        margin-bottom: 20px;
        display: flex;
        gap: 10px;
        flex-direction: column;
    }
    .search-type-toggle {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
        width: 100%;
    }
    .search-type-btn {
        flex: 1;
        padding: 10px;
        border: 2px solid #3498db;
        background: transparent;
        color: #3498db;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .search-type-btn.active {
        background: #3498db;
        color: white;
    }
    .search-type-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.2);
    }
    input[type="text"] {
        flex: 1;
        padding: 12px;
        border: 2px solid #3498db;
        border-radius: 6px;
        font-size: 16px;
        transition: all 0.3s ease;
    }
    input[type="text"]:focus {
        outline: none;
        border-color: #2980b9;
        box-shadow: 0 0 15px rgba(52, 152, 219, 0.3);
    }
    input[type="text"]::placeholder {
        animation: changePlaceholder 12s infinite;
        opacity: 0.7;
    }
    @keyframes changePlaceholder {
        0%, 20% {
            opacity: 1;
        }
        22%, 25% {
            opacity: 0;
        }
        27%, 45% {
            opacity: 1;
        }
        47%, 50% {
            opacity: 0;
        }
        52%, 70% {
            opacity: 1;
        }
        72%, 75% {
            opacity: 0;
        }
        77%, 95% {
            opacity: 1;
        }
        97%, 100% {
            opacity: 0;
        }
    }
    button {
        background: #3498db;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s ease;
        font-weight: bold;
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
        transform: translateY(0);
    }
    button:hover {
        background: #2980b9;
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);
    }
    button:active {
        transform: translateY(1px);
    }
    .loading {
        display: none;
        margin: 20px 0;
        text-align: center;
    }
    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }
    .action-buttons {
        position: sticky;
        top: 20px;
        z-index: 100;
        background: rgba(255,255,255,0.98);
        border-bottom: 2px solid #3498db;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        backdrop-filter: blur(5px);
        margin: 20px 0;
        display: none;
    }
    .action-buttons button {
        display: flex;
        align-items: center;
        gap: 10px;
        background: #3498db;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s ease;
        font-weight: bold;
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }
    .action-buttons button:hover {
        background: #2980b9;
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);
    }
    .action-buttons button:active {
        transform: translateY(1px);
    }
    .credits {
        text-align: center;
        margin-top: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }
    .credits h2 {
        margin: 0;
        font-size: 1.2em;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
    }
    .why-purchase {
        background: linear-gradient(135deg, #ffffff, #f5f9ff);
        padding: 25px;
        border-radius: 12px;
        margin: 30px 0;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    .why-purchase h2 {
        color: #2c3e50;
        font-size: 1.8em;
        margin-bottom: 20px;
        text-align: center;
    }
    .why-purchase ul {
        list-style: none;
        padding: 0;
    }
    .why-purchase li {
        margin: 15px 0;
        padding-left: 30px;
        position: relative;
        color: #34495e;
        line-height: 1.6;
    }
    .why-purchase li:before {
        content: 'âœ“';
        color: #27ae60;
        position: absolute;
        left: 0;
        font-weight: bold;
    }
    .book {
        position: absolute;
        top: -30px;
        right: -30px;
        width: 60px;
        height: 80px;
        perspective: 1000px;
    }
    .book-cover {
        position: absolute;
        width: 100%;
        height: 100%;
        transform-style: preserve-3d;
        animation: flipBook 3s ease-in-out infinite;
    }
    .book-page {
        position: absolute;
        width: 100%;
        height: 100%;
        background: linear-gradient(45deg, #3498db, #2980b9);
        border-radius: 5px;
        transform-origin: left;
        box-shadow: 0 2px 5px rgba(0,0,0,0.3);
    }
    .book-page:nth-child(2) {
        background: white;
        animation: flipPage 3s ease-in-out infinite;
    }
    @keyframes flipBook {
        0% { transform: rotateY(0deg); }
        50% { transform: rotateY(-15deg); }
        100% { transform: rotateY(0deg); }
    }
    @keyframes flipPage {
        0% { transform: rotateY(0deg); }
        50% { transform: rotateY(-160deg); }
        100% { transform: rotateY(0deg); }
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
        20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
    .shake {
        animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
    }
    .alert-popup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px 30px;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        z-index: 1001;
        text-align: center;
        min-width: 300px;
        animation: fadeIn 0.3s ease-out;
    }
    .alert-popup p {
        color: #2c3e50;
        font-size: 16px;
        margin: 0;
        line-height: 1.5;
    }
    .alert-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
        animation: fadeIn 0.2s ease-out;
    }
    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    .benefits-list {
        animation: fadeInUp 0.5s ease-out;
    }
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    .benefits-list li {
        transition: transform 0.2s ease;
    }
    .benefits-list li:hover {
        transform: translateX(5px);
    }
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    #output > * {
        animation-delay: calc(var(--index) * 0.1s);
    }
    .login-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #e8f4f8, #d1e9ef);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }
    .login-box {
        background: white;
        padding: 40px;
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        text-align: center;
        width: 90%;
        max-width: 400px;
        animation: fadeInUp 0.5s ease-out;
    }
    .login-box h1 {
        color: #2c3e50;
        font-size: 2.5em;
        margin-bottom: 30px;
        font-weight: 900;
        text-transform: uppercase;
        letter-spacing: 2px;
        background: linear-gradient(45deg, #2c3e50, #3498db);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .login-form {
        margin-bottom: 30px;
    }
    .login-form input {
        width: 100%;
        padding: 12px;
        margin-bottom: 15px;
        border: 2px solid #3498db;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s ease;
        outline: none;
    }
    .login-form input:focus {
        border-color: #2980b9;
        box-shadow: 0 0 15px rgba(52, 152, 219, 0.3);
    }
    .login-error {
        color: #e74c3c;
        margin-top: 10px;
        font-size: 14px;
    }
    .pricing-banner {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        padding: 20px;
        border-radius: 12px;
        margin-top: 20px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .pricing-banner h3 {
        margin: 0 0 10px 0;
        font-size: 1.2em;
    }
    .price {
        font-size: 1.5em;
        font-weight: bold;
        margin: 10px 0;
    }
    .buy-now-btn {
        display: inline-block;
        padding: 10px 25px;
        background: white;
        color: #3498db;
        text-decoration: none;
        border-radius: 25px;
        font-weight: bold;
        margin-top: 10px;
        transition: all 0.3s ease;
    }
    .buy-now-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255,255,255,0.2);
    }
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/marked/2.1.3/marked.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</head>
<body>
    <div id="loginContainer" class="login-container">
        <div class="login-box">
            <div class="eye-container">
                <div class="eye">
                    <div class="pupil"></div>
                </div>
            </div>
            <h1>Pupil Point</h1>
            <div class="login-form">
                <input type="text" id="username" placeholder="Username" />
                <input type="password" id="password" placeholder="Password" />
                <button onclick="login()">Login</button>
                <p id="loginError" class="login-error"></p>
            </div>
            <div class="pricing-banner">
                <h3>Don't have an account?</h3>
                <div class="price">Just â‚¹200 per month!</div>
                <a href="mailto:iamsirenjeev@gmail.com" class="buy-now-btn">Get Access Now</a>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="header">
            <div class="book">
                <div class="book-cover">
                    <div class="book-page"></div>
                    <div class="book-page"></div>
                </div>
            </div>
            <div class="eye-container">
                <div class="eye">
                    <div class="pupil"></div>
                </div>
            </div>
            <h1>Pupil Point</h1>
            <p>The perfect study companion for optometry students - Quick revision made easy!</p>
        </div>
        <div class="input-group">
            <div class="search-type-toggle">
                <button id="ocularSearchBtn" class="search-type-btn active">Ocular Disease Search</button>
                <button id="generalSearchBtn" class="search-type-btn">General Search</button>
            </div>
            <input type="text" id="diseaseInput" placeholder="" />
            <button onclick="handleSearch()">Generate Study Guide</button>
        </div>
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p id="loadingFact" style="max-width: 400px; margin: 20px auto; text-align: center; color: #2c3e50; font-style: italic;">Loading...</p>
        </div>
        <pre id="output"></pre>
        <div class="action-buttons" id="actionButtons">
            <button onclick="downloadAsPDF()">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                </svg>
                Download Study Guide PDF
            </button>
        </div>
        <div class="why-purchase">
            <h2>Why Perfect for Optometry Students?</h2>
            <ul>
                <li>Simplified explanations to help understand complex concepts</li>
                <li>Quick reference guides for better understanding</li>
                <li>Easy-to-follow breakdowns of common ocular conditions</li>
                <li>Perfect for quick revision before exams</li>
                <li>Specially designed with simple language for easier learning</li>
                <li>Basic explanations that make concepts clearer</li>
                <li>Helpful analogies and examples for better understanding</li>
                <li>Time-saving - get organized study material instantly</li>
                <li>Great companion for reviewing basic concepts</li>
            </ul>
        </div>
        <div class="credits">
            <h2>Created By V. Janarthan</h2>
        </div>
    </div>

    <div class="alert-overlay" id="alertOverlay"></div>
    <div class="alert-popup" id="alertPopup">
        <p>Please enter an ocular disease name</p>
    </div>

    <script>
        const VALID_USERS = {
            'jame': 'jame@123',
            'admin': 'admin123',
            'student': 'student123'
        };

        const optometryFacts = [
            "The human eye can distinguish approximately 10 million different colors!",
            "The cornea is the only tissue in the human body that doesn't contain blood vessels.",
            "Babies can only see in black and white and shades of grey when they're born.",
            "The eyes contribute to 85% of our total knowledge!",
            "Your eyes are about the same size as when you were born.",
            "The average blink lasts for about 1/10th of a second.",
            "Your eyes can process 36,000 pieces of information every hour.",
            "The eye muscles are the most active muscles in your body.",
            "20/20 vision just means 'normal' vision - not 'perfect' vision!",
            "The human eye can detect light from a candle 14 miles away."
        ];

        let currentSearchType = 'ocular'; // Default to ocular search

        function showRandomFact() {
            const loadingFact = document.getElementById('loadingFact');
            if (loadingFact) {
                const randomFact = optometryFacts[Math.floor(Math.random() * optometryFacts.length)];
                loadingFact.textContent = randomFact;
            }
        }

        async function fetchFromGemini(inputText) {
            const API_KEY = "AIzaSyDSwpJAEPeHFqA90UbB9kBH2KSoGYTxAxg";
            
            try {
                const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${API_KEY}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        contents: [
                            {
                                role: "user",
                                parts: [{ 
                                    text: `I want the following template to be used whenever I mention a disease name. Please use the format as shown below, and adjust sections as appropriate based on the disease.

### [Disease Name] Overview

## 1. ***Objective***
- ***Objective***: The objective of understanding [Disease Name] is to grasp its role in [relevant physiological function], pathophysiology, and clinical significance for normal [organ/system] function. Understanding this disease is crucial for proper diagnosis, treatment, and management.
- ***Affected Anatomy/Structure***: [Disease Name] primarily affects the **[anatomical structure/organ]**, often involving the **[specific part/region]**.

## 2. Overview
- ***Overview***: [Disease Name] is characterized by [brief description of the disease, e.g., abnormal growth, functional change, or pathologic alteration in a body system]. It involves [brief mechanism or pathophysiology summary].  
- ***Pathophysiology***: The disease is caused by [describe the mechanism or underlying cause of the disease]. It results in [list of changes caused by the disease to the affected structures].

## 3. ***Analogy***
- ***Analogy***: Think of [Disease Name] as [analogy relevant to disease]. The affected structure is like a [analogy comparison], leading to [effects or changes].
  
- ***Analogy Example***: "[Disease Name] is like a [analogy] where [comparison], ultimately causing [effect]."

## 4. Signs and Symptoms

### Signs (observable features):
| **Sign**              | **Description**                                           |
|-----------------------|-----------------------------------------------------------|
| [Sign 1]              | [Explanation of the sign]                                 |
| [Sign 2]              | [Explanation of the sign]                                 |

### Symptoms (reported by the patient):
| **Symptom**           | **Description**                                           |
|-----------------------|-----------------------------------------------------------|
| [Symptom 1]           | [Explanation of the symptom]                              |
| [Symptom 2]           | [Explanation of the symptom]                              |

## 5. ***Mnemonics for Signs and Symptoms***
- ***Mnemonic Example***:
  - **For [Disease Name]**: **"[Mnemonic]"**
    - **[Mnemonic Letter]**: [Key feature or aspect of the disease]
    - **[Mnemonic Letter]**: [Key feature or aspect of the disease]
    - [Continue with the mnemonic breakdown]

## 6. Disease Classification

### Classification (based on [Type]):
| **Classification**     | **Description**                                         |
|------------------------|---------------------------------------------------------|
| [Classification 1]      | [Description of the classification]                    |
| [Classification 2]      | [Description of the classification]                    |
  
**Note**: This section will be used for any type of classification, such as:
- **Etiological Classification** (e.g., viral, bacterial, autoimmune)
- **Severity Classification** (e.g., mild, moderate, severe)
- **Stage Classification** (e.g., stage 1, stage 2, etc.)
- **Functional Classification** (e.g., early vs. late-stage disease)

## 7. Diagnosis
- ***Diagnostic Methods***: Diagnosis of [Disease Name] includes [relevant diagnostic methods like tests, imaging, etc.].
  
### Tabulate Diagnostic Methods:
| **Test/Procedure**     | **Purpose**                                              |
|------------------------|----------------------------------------------------------|
| [Test 1]               | [Purpose of the test]                                    |
| [Test 2]               | [Purpose of the test]                                    |

## 8. Management and Treatment
- ***Management Options***: Treatment for [Disease Name] involves [pharmacological treatments, lifestyle modifications, or surgical options].
  
### Tabulate Management Options:
| **Treatment Option**    | **Type**             | **Side Effects/Considerations** |
|-------------------------|----------------------|---------------------------------|
| [Treatment 1]           | [Medical/Surgical]   | [Side effects or considerations]|
| [Treatment 2]           | [Medical/Surgical]   | [Side effects or considerations]|

## 9. Prognosis
- ***Prognosis***: The prognosis for [Disease Name] depends on [factors such as severity, treatment options, or response to treatment]. With proper management, [expected outcome], but without treatment, [possible consequences].

## 10. Quick Summary
- ***Quick Summary***: [Disease Name] is characterized by [brief overview]. Diagnosis is made through [diagnostic methods], and treatment options include [main treatment options]. Early diagnosis and management are critical for [best outcomes].

Give it as markdown format` + inputText
                                }]
                            },
                            {
                                role: "model",
                                parts: [{ text: "Template received and understood. I'll use this format." }]
                            },
                            {
                                role: "user",
                                parts: [{ text: inputText }]
                            }
                        ],
                        generationConfig: {
                            temperature: 1,
                            topK: 40,
                            topP: 0.95,
                            maxOutputTokens: 8192,
                            responseMimeType: "text/plain"
                        }
                    })
                });

                if (!response.ok) {
                    throw new Error('API request failed');
                }

                const data = await response.json();
                return data.candidates[0].content.parts[0].text;
            } catch (error) {
                console.error('Error:', error);
                return null;
            }
        }

        function login() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const loginContainer = document.getElementById('loginContainer');
            const mainContainer = document.querySelector('.container');
            const pricingBanner = document.querySelector('.pricing-banner');

            pricingBanner.style.display = 'none';

            if (VALID_USERS[username] === password) {
                localStorage.setItem('isLoggedIn', 'true');
                localStorage.setItem('username', username);
                loginContainer.style.display = 'none';
                mainContainer.style.display = 'block';
                mainContainer.style.animation = 'fadeInUp 0.5s ease-out';
            } else {
                pricingBanner.style.display = 'block';

                document.getElementById('username').classList.add('shake');
                document.getElementById('password').classList.add('shake');

                setTimeout(() => {
                    document.getElementById('username').classList.remove('shake');
                    document.getElementById('password').classList.remove('shake');
                }, 500);

                document.getElementById('password').value = '';
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const isLoggedIn = localStorage.getItem('isLoggedIn');
            const loginContainer = document.getElementById('loginContainer');
            const mainContainer = document.querySelector('.container');
            
            if (isLoggedIn === 'true') {
                loginContainer.style.display = 'none';
                mainContainer.style.display = 'block';
            } else {
                loginContainer.style.display = 'flex';
                mainContainer.style.display = 'none';
            }
            
            const header = document.querySelector('.header');
            const logoutBtn = document.createElement('button');
            logoutBtn.innerHTML = 'Logout';
            logoutBtn.className = 'logout-btn';
            logoutBtn.onclick = () => {
                localStorage.removeItem('isLoggedIn');
                localStorage.removeItem('username');
                location.reload();
            };
            header.appendChild(logoutBtn);
            
            const username = localStorage.getItem('username');
            if (username) {
                const welcomeMsg = document.createElement('p');
                welcomeMsg.innerHTML = `Welcome, ${username}!`;
                welcomeMsg.className = 'welcome-msg';
                header.insertBefore(welcomeMsg, header.firstChild);
            }
            
            const pricingBanner = document.querySelector('.pricing-banner');
            if (pricingBanner) {
                pricingBanner.style.display = 'none';
            }
        });

        async function handleSearch() {
            const input = document.getElementById('diseaseInput');
            const inputValue = input.value.trim();
            
            if (!inputValue) {
                input.classList.add('shake');
                showAlert('Please enter a search term');
                setTimeout(() => {
                    input.classList.remove('shake');
                }, 500);
                return;
            }

            try {
                const loading = document.getElementById('loading');
                const output = document.getElementById('output');
                const actionButtons = document.getElementById('actionButtons');
                
                loading.style.display = 'block';
                output.style.display = 'none';
                actionButtons.style.display = 'none';

                showRandomFact();
                const factInterval = setInterval(showRandomFact, 3000);

                let prompt;
                if (currentSearchType === 'ocular') {
                    prompt = inputValue; // Use existing ocular disease template
                } else {
                    prompt = `Please provide a comprehensive study guide for ${inputValue} following this structure:

### Overview
- Brief introduction
- Key concepts

### Important Points
- Main characteristics
- Key features
- Critical aspects

### Classification (if applicable)
- Types or categories
- Key differences

### Clinical Significance
- Importance in healthcare
- Practical applications

### Key Terms and Definitions
- Important terminology
- Related concepts

### Quick Summary
- Main takeaways
- Key points to remember

Please provide detailed information in an educational format suitable for medical students.`;
                }

                const response = await fetchFromGemini(prompt);
                
                if (response) {
                    clearInterval(factInterval);
                    output.innerHTML = renderMarkdown(response);
                    output.style.display = 'block';
                    actionButtons.style.display = 'flex';
                } else {
                    throw new Error('Failed to generate content');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert(error.message || 'An error occurred. Please try again.');
            } finally {
                loading.style.display = 'none';
            }
        }

        // Adding event listeners for the toggle buttons
        document.addEventListener('DOMContentLoaded', () => {
            const ocularBtn = document.getElementById('ocularSearchBtn');
            const generalBtn = document.getElementById('generalSearchBtn');
            
            ocularBtn.addEventListener('click', () => toggleSearchType('ocular'));
            generalBtn.addEventListener('click', () => toggleSearchType('general'));
            
            // Update existing code
            updatePlaceholder();
            toggleSearchType('ocular'); // Set initial state
        });

        function toggleSearchType(type) {
            currentSearchType = type;
            const ocularBtn = document.getElementById('ocularSearchBtn');
            const generalBtn = document.getElementById('generalSearchBtn');
            const input = document.getElementById('diseaseInput');
            
            if (type === 'ocular') {
                ocularBtn.classList.add('active');
                generalBtn.classList.remove('active');
                input.placeholder = "Enter ocular disease name (e.g., Keratoconus...)";
            } else {
                generalBtn.classList.add('active');
                ocularBtn.classList.remove('active');
                input.placeholder = "Enter any medical topic to search...";
            }
        }

        function updatePlaceholder() {
            const input = document.getElementById('diseaseInput');
            const ocularPlaceholders = [
                "Enter ocular disease name (e.g., Keratoconus...)",
                "Try searching for Glaucoma...",
                "Learn about Retinopathy...",
                "Search for Conjunctivitis...",
                "Looking for Cataract information?",
                "How about Dry Eye Syndrome..."
            ];
            
            const generalPlaceholders = [
                "Search any medical topic...",
                "Try searching for Diabetes...",
                "Learn about Hypertension...",
                "Search for Asthma...",
                "Looking for Cancer information?",
                "How about Heart Disease..."
            ];
            
            let currentIndex = 0;
            
            setInterval(() => {
                const placeholders = currentSearchType === 'ocular' ? ocularPlaceholders : generalPlaceholders;
                input.placeholder = placeholders[currentIndex];
                currentIndex = (currentIndex + 1) % placeholders.length;
            }, 3000);
        }

        function downloadAsPDF() {
            try {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF();
                const output = document.getElementById('output');
                const diseaseInput = document.getElementById('diseaseInput').value.trim();
                const fileName = diseaseInput ? `${diseaseInput.replace(/\s+/g, '-')}-study-guide.pdf` : 'ocular-disease-study-guide.pdf';

                let yPosition = 20;
                const pageWidth = pdf.internal.pageSize.getWidth();
                const margins = { left: 20, right: 20 };
                const contentWidth = pageWidth - margins.left - margins.right;

                // Set default styles for different text types
                const styles = {
                    normal: {
                        fontSize: 12,
                        lineHeight: 7,
                        textColor: [0, 0, 0]
                    },
                    heading1: {
                        fontSize: 18,
                        lineHeight: 10,
                        textColor: [0, 0, 0]
                    },
                    heading2: {
                        fontSize: 16,
                        lineHeight: 8,
                        textColor: [0, 0, 0]
                    },
                    table: {
                        fontSize: 10,
                        lineHeight: 6,
                        textColor: [0, 0, 0],
                        headerTextColor: [0, 0, 0],
                        borderColor: [0, 0, 0],
                        cellPadding: 5,
                        headerBackgroundColor: [240, 240, 240]
                    }
                };

                // Function to add text with line breaks
                function addTextWithLineBreaks(text, style) {
                    pdf.setFontSize(style.fontSize);
                    pdf.setTextColor(...style.textColor);
                    
                    text = text.replace(/[*_`]/g, '').trim();
                    
                    const lines = pdf.splitTextToSize(text, contentWidth);
                    
                    lines.forEach(line => {
                        if (yPosition > pdf.internal.pageSize.getHeight() - 20) {
                            pdf.addPage();
                            yPosition = 20;
                        }
                        
                        pdf.text(line, margins.left, yPosition);
                        yPosition += style.lineHeight;
                    });
                    
                    yPosition += 5;
                }

                // Improved table handling function
                function addTable(tableElement) {
                    const style = styles.table;
                    pdf.setFontSize(style.fontSize);
                    
                    // Get rows including header
                    const rows = Array.from(tableElement.querySelectorAll('tr'));
                    if (rows.length === 0) return;

                    // Calculate widths based on content
                    const columnCount = rows[0].cells.length;
                    const columnWidths = Array(columnCount).fill((contentWidth) / columnCount);

                    // Table settings
                    const rowHeight = style.lineHeight * 3;
                    const cellPadding = style.cellPadding;
                    let currentY = yPosition;

                    // Process each row
                    rows.forEach((row, rowIndex) => {
                        // Check if we need a new page
                        if (currentY + rowHeight > pdf.internal.pageSize.getHeight() - 20) {
                            pdf.addPage();
                            currentY = 20;
                        }

                        const cells = Array.from(row.cells);
                        let currentX = margins.left;

                        // Draw cells
                        cells.forEach((cell, colIndex) => {
                            // Set colors for header row
                            if (rowIndex === 0) {
                                pdf.setFillColor(...style.headerBackgroundColor);
                                pdf.setTextColor(...style.headerTextColor);
                            } else {
                                pdf.setFillColor(255, 255, 255);
                                pdf.setTextColor(...style.textColor);
                            }

                            // Draw cell background
                            pdf.rect(currentX, currentY, columnWidths[colIndex], rowHeight, 'FD');

                            // Add text content
                            const cellText = cell.textContent.trim();
                            const textLines = pdf.splitTextToSize(cellText, columnWidths[colIndex] - (cellPadding * 2));
                            
                            // Center text vertically in cell
                            const textHeight = textLines.length * style.lineHeight;
                            const textY = currentY + (rowHeight - textHeight) / 2 + style.lineHeight;
                            
                            pdf.text(textLines, currentX + cellPadding, textY);
                            currentX += columnWidths[colIndex];
                        });

                        currentY += rowHeight;
                    });

                    yPosition = currentY + style.lineHeight;
                }

                // Process each element in the output
                const elements = output.getElementsByTagName('*');
                Array.from(elements).forEach(element => {
                    const text = element.textContent.trim();
                    if (!text) return;

                    switch(element.tagName.toLowerCase()) {
                        case 'h1':
                            addTextWithLineBreaks(text, styles.heading1);
                            break;
                        case 'h2':
                            addTextWithLineBreaks(text, styles.heading2);
                            break;
                        case 'p':
                        case 'li':
                            addTextWithLineBreaks(text, styles.normal);
                            break;
                        case 'table':
                            addTable(element);
                            break;
                    }
                });

                pdf.save(fileName);
                showAlert('PDF downloaded successfully!');
            } catch (error) {
                console.error('Error generating PDF:', error);
                showAlert('Error generating PDF. Please try again.');
            }
        }

        function renderMarkdown(text) {
            const renderer = new marked.Renderer();
            
            renderer.heading = (text, level) => {
                return `<h${level} class="animate-in" style="opacity: 0; animation: fadeIn 0.5s forwards;">${text}</h${level}>`;
            };
            
            renderer.paragraph = (text) => {
                return `<p class="animate-in" style="opacity: 0; animation: fadeIn 0.5s forwards;">${text}</p>`;
            };
            
            renderer.list = (body, ordered) => {
                const type = ordered ? 'ol' : 'ul';
                return `<${type} class="animate-in" style="opacity: 0; animation: fadeIn 0.5s forwards;">${body}</${type}>`;
            };
            
            renderer.listitem = (text) => {
                return `<li style="opacity: 0; animation: fadeIn 0.5s forwards;">${text}</li>`;
            };

            marked.setOptions({
                renderer: renderer,
                gfm: true,
                breaks: true,
                smartLists: true,
                smartypants: true
            });

            return marked(text);
        }

        function showAlert(message) {
            const alertOverlay = document.getElementById('alertOverlay');
            const alertPopup = document.getElementById('alertPopup');
            const p = alertPopup.querySelector('p');
            p.textContent = message;
            
            alertOverlay.style.display = 'block';
            alertPopup.style.display = 'block';
            
            setTimeout(() => {
                alertOverlay.style.display = 'none';
                alertPopup.style.display = 'none';
            }, 2000);
        }

        document.getElementById('alertOverlay').addEventListener('click', () => {
            document.getElementById('alertOverlay').style.display = 'none';
            document.getElementById('alertPopup').style.display = 'none';
        });

        document.addEventListener('DOMContentLoaded', () => {
            updatePlaceholder();
        });
    </script>
</body></html>
